# Contract Tests: UI Controller

component: "Terminal UI Controller"
interface: "RenderView & HandleKeyEvent"
description: "Validates terminal UI rendering and interaction contracts"

# Render View Contract
render_view:
  operation: "RenderView"

  input_schema:
    document_id: uuid
    view_mode: enum[document, comments, split, llm_preview]
    viewport:
      width: integer
      height: integer
    scroll_offset:
      document: integer
      comments: integer
    filters: object?

  output_schema:
    success:
      rendered_lines: array<string>
      cursor_position: Position
      status_line: string
      active_highlights:
        - type: enum[comment, selection, search]
          positions: array<Position>
          style: object

    error:
      code: enum[VIEWPORT_TOO_SMALL]
      message: string

  scenarios:
    - name: "Render split view"
      input:
        document_id: "{doc_id}"
        view_mode: "split"
        viewport: {width: 120, height: 40}
        scroll_offset: {document: 0, comments: 0}
      expect:
        success: true
        rendered_lines: 40
        document_pane_visible: true
        comments_pane_visible: true
        split_ratio: "50:50 or 60:40"
        status_line_present: true

    - name: "Render document-only view"
      input:
        view_mode: "document"
        viewport: {width: 80, height: 24}
      expect:
        rendered_lines: 24
        document_pane: "full width"
        comments_pane: hidden

    - name: "Render comments-only view"
      input:
        view_mode: "comments"
      expect:
        document_pane: hidden
        comments_pane: "full width"

    - name: "Render with scroll offset"
      input:
        view_mode: "split"
        scroll_offset: {document: 100, comments: 50}
      expect:
        document_starts_at_line: 100
        comments_starts_at_entry: 50

    - name: "Viewport too small"
      input:
        viewport: {width: 40, height: 10}
      expect:
        error: true
        error_code: "VIEWPORT_TOO_SMALL"
        minimum_required: {width: 80, height: 24}

    - name: "Highlight active comment"
      input:
        active_comment: "c1"
      expect:
        active_highlights:
          - type: "comment"
            comment_id: "c1"
            style: "highlighted"

    - name: "Highlight text selection"
      input:
        selection: {start: 100, end: 200}
      expect:
        active_highlights:
          - type: "selection"
            positions: [{start: 100, end: 200}]
            style: "reverse_video"

    - name: "Show search results"
      input:
        search_query: "TODO"
        search_results: 5
      expect:
        active_highlights:
          - type: "search"
            positions: array<Position>
            count: 5

    - name: "Status line shows document info"
      expect:
        status_line_contains:
          - document_name
          - cursor_position
          - comment_count
          - mode_indicator

    - name: "Render with color support"
      setup:
        - terminal_colors: 256
      expect:
        syntax_highlighting: true
        comment_colors: true

    - name: "Render without color support"
      setup:
        - terminal_colors: 0
      expect:
        graceful_degradation: true
        ascii_indicators: true

# Handle Key Event Contract
handle_key_event:
  operation: "HandleKeyEvent"

  input_schema:
    key: string
    modifiers: array<enum[ctrl, alt, shift, meta]>
    current_state: UIState

  output_schema:
    success:
      action: enum[none, navigate, edit, command, search]
      new_state: UIState
      side_effects: array<string>

    error:
      code: enum[INVALID_KEY_BINDING]
      message: string

  scenarios:
    - name: "Arrow key navigation"
      input:
        key: "down"
        modifiers: []
        current_state: {mode: "normal", cursor: {line: 10}}
      expect:
        action: "navigate"
        new_state:
          cursor: {line: 11}
        side_effects: []

    - name: "Page down navigation"
      input:
        key: "page_down"
        current_state: {cursor: {line: 10}, viewport_height: 40}
      expect:
        action: "navigate"
        new_state:
          cursor: {line: 50}  # +40 lines
          scroll_offset_updated: true

    - name: "Switch to insert mode"
      input:
        key: "i"
        current_state: {mode: "normal"}
      expect:
        action: "command"
        new_state:
          mode: "insert"
        side_effects: ["show_insert_indicator"]

    - name: "Comment creation shortcut"
      input:
        key: "c"
        modifiers: ["ctrl"]
        current_state: {mode: "normal"}
      expect:
        action: "command"
        new_state:
          mode: "comment"
        side_effects: ["open_comment_input"]

    - name: "Search initiation"
      input:
        key: "/"
        current_state: {mode: "normal"}
      expect:
        action: "search"
        new_state:
          mode: "search"
        side_effects: ["show_search_prompt"]

    - name: "Save command"
      input:
        key: "s"
        modifiers: ["ctrl"]
        current_state: {mode: "normal", document_modified: true}
      expect:
        action: "command"
        side_effects: ["save_document"]

    - name: "Escape to normal mode"
      input:
        key: "escape"
        current_state: {mode: "insert"}
      expect:
        action: "command"
        new_state:
          mode: "normal"

    - name: "Invalid key in mode"
      input:
        key: "x"
        current_state: {mode: "normal"}
      expect:
        action: "none"
        or_error: "INVALID_KEY_BINDING"

    - name: "Text input in insert mode"
      input:
        key: "a"
        current_state: {mode: "insert", cursor: {offset: 100}}
      expect:
        action: "edit"
        side_effects: ["insert_character_'a'"]

    - name: "Backspace in insert mode"
      input:
        key: "backspace"
        current_state: {mode: "insert"}
      expect:
        action: "edit"
        side_effects: ["delete_previous_character"]

    - name: "Tab in insert mode"
      input:
        key: "tab"
        current_state: {mode: "insert"}
      expect:
        action: "edit"
        side_effects: ["insert_tab_or_spaces"]

    - name: "Switch pane focus"
      input:
        key: "tab"
        modifiers: ["ctrl"]
        current_state: {focused_pane: "document"}
      expect:
        action: "navigate"
        new_state:
          focused_pane: "comments"

# View Mode Transitions
view_transitions:
  - name: "Toggle split view"
    input:
      key: "s"
      modifiers: ["ctrl", "alt"]
      current_state: {view_mode: "document"}
    expect:
      new_state:
        view_mode: "split"

  - name: "Toggle comments panel"
    input:
      key: "c"
      modifiers: ["ctrl", "alt"]
      current_state: {view_mode: "split"}
    expect:
      new_state:
        view_mode: "document"

  - name: "Show LLM preview"
    setup:
      - llm_response_available: true
    input:
      key: "l"
      modifiers: ["ctrl"]
    expect:
      new_state:
        view_mode: "llm_preview"

# Scroll Synchronization
scroll_sync:
  - name: "Document scroll triggers comment highlight"
    input:
      action: "scroll_document"
      new_position: line 50
    expect:
      comments_at_line_50_highlighted: true
      comments_pane_scrolled_to_relevant: true

  - name: "Comment selection scrolls document"
    input:
      action: "select_comment"
      comment_position: line 100
    expect:
      document_scrolled_to: line 100
      comment_line_highlighted: true

  - name: "Independent scroll in split view"
    input:
      focused_pane: "comments"
      action: "scroll_down"
    expect:
      comments_pane_scrolled: true
      document_pane_unchanged: true

# Resize Handling
resize:
  - name: "Terminal resize"
    initial:
      viewport: {width: 80, height: 24}
    event:
      new_viewport: {width: 120, height: 40}
    expect:
      render_triggered: true
      layout_recalculated: true
      no_content_loss: true
      update_time: "< 100ms"

  - name: "Resize below minimum"
    event:
      new_viewport: {width: 60, height: 15}
    expect:
      warning_shown: true
      or_graceful_degradation: true

  - name: "Pane resize"
    input:
      action: "resize_split"
      new_ratio: "70:30"
    expect:
      document_pane: "70% width"
      comments_pane: "30% width"

# Performance
performance:
  - name: "Render speed"
    input:
      viewport: {width: 120, height: 40}
      document_lines: 1000
    expect:
      render_time: "< 16ms"  # 60fps
      frame_rate: ">= 60fps"

  - name: "Key event latency"
    input:
      key: "down"
    expect:
      response_time: "< 50ms"
      perceived: "instant"

  - name: "Scroll smoothness"
    input:
      action: "scroll"
      lines: 10
    expect:
      smooth_animation: true
      no_flicker: true

  - name: "Large document rendering"
    input:
      document_lines: 10000
      viewport_height: 40
    expect:
      render_visible_only: true
      virtual_scrolling: true
      no_lag: true

# Focus Management
focus:
  - name: "Focus switches panes"
    input:
      action: "switch_focus"
    expect:
      focused_pane_highlighted: true
      unfocused_pane_dimmed: true
      cursor_in_focused_pane: true

  - name: "Focus affects key handling"
    input:
      focused_pane: "comments"
      key: "down"
    expect:
      comments_list_scrolls: true
      document_unchanged: true

# Mode Indicators
mode_indicators:
  - name: "Normal mode indicator"
    state: {mode: "normal"}
    expect:
      status_line_shows: "NORMAL"
      cursor_style: "block"

  - name: "Insert mode indicator"
    state: {mode: "insert"}
    expect:
      status_line_shows: "INSERT"
      cursor_style: "line"

  - name: "Command mode indicator"
    state: {mode: "command"}
    expect:
      status_line_shows: "COMMAND"
      command_prompt_visible: true

  - name: "Search mode indicator"
    state: {mode: "search"}
    expect:
      status_line_shows: "SEARCH"
      search_input_visible: true

# Error Display
error_handling:
  - name: "Display error message"
    input:
      error: "File not found"
    expect:
      error_shown_prominently: true
      error_dismissible: true

  - name: "Transient status messages"
    input:
      message: "File saved"
    expect:
      message_shown: true
      auto_dismiss_after: "3 seconds"

# Invariants
invariants:
  - "Cursor always within viewport"
  - "Cursor position always valid in document"
  - "Focused pane always indicated"
  - "Status line always visible"
  - "Scroll offset never negative"
  - "Render output matches viewport size"
  - "Key events always processed"
  - "State transitions always valid"
  - "No rendering artifacts"

# Accessibility
accessibility:
  - name: "High contrast mode"
    setup:
      - high_contrast: true
    expect:
      colors: "high contrast only"
      readable: true

  - name: "Screen reader friendly"
    expect:
      text_only_mode_available: true
      semantic_markup: true
