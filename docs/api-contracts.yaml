# API Contract Specification

contracts:
  # Document Operations
  OpenDocument:
    description: "Load and parse a markdown document"
    input:
      filepath: string
      encoding: string?  # Optional, defaults to UTF-8
    output:
      success:
        document_id: uuid
        content: string
        comments: array<Comment>
        statistics:
          total_comments: integer
          active_threads: integer
          line_count: integer
          char_count: integer
      errors:
        - code: FILE_NOT_FOUND
          message: "File does not exist at path"
        - code: PERMISSION_DENIED
          message: "Cannot read file"
        - code: PARSE_ERROR
          message: "Failed to parse document"
          details: array<ParseError>
    idempotent: true
    state_transition: "none -> loaded"
    async: true

  SaveDocument:
    description: "Persist document changes to disk"
    input:
      document_id: uuid
      create_backup: boolean?
    output:
      success:
        saved_at: timestamp
        bytes_written: integer
        backup_path: string?
      errors:
        - code: DOCUMENT_NOT_FOUND
          message: "No document with given ID"
        - code: WRITE_ERROR
          message: "Failed to write file"
        - code: DISK_FULL
          message: "Insufficient disk space"
    idempotent: false
    state_transition: "modified -> saved"
    async: true

  ParseComments:
    description: "Extract comments from markdown content"
    input:
      content: string
      syntax_flavor: enum[criticmarkup, standard]?
    output:
      success:
        comments: array<Comment>
        ast: DocumentAST
        parse_warnings: array<Warning>
      errors:
        - code: INVALID_SYNTAX
          message: "Malformed comment syntax"
          position: Position
    idempotent: true
    state_transition: "none"
    async: false

  # Comment Operations
  CreateComment:
    description: "Add new comment at position"
    input:
      document_id: uuid
      text: string
      author: string
      position: Position
      parent_id: string?  # For replies
    output:
      success:
        comment_id: string
        serialized: string  # CriticMarkup format
        position: Position  # Final position
        thread_id: uuid?
      errors:
        - code: INVALID_POSITION
          message: "Position out of document bounds"
        - code: EMPTY_COMMENT
          message: "Comment text cannot be empty"
        - code: PARENT_NOT_FOUND
          message: "Parent comment does not exist"
    idempotent: false
    state_transition: "document -> document+comment"
    async: false
    validation:
      - text: min_length(1)
      - author: non_empty
      - position: within_document

  UpdateComment:
    description: "Modify existing comment"
    input:
      document_id: uuid
      comment_id: string
      text: string?
      status: enum[active, resolved]?
    output:
      success:
        updated_at: timestamp
        new_content: string
      errors:
        - code: COMMENT_NOT_FOUND
          message: "Comment does not exist"
        - code: UNAUTHORIZED
          message: "Cannot edit other author's comment"
    idempotent: false
    state_transition: "comment -> comment'"
    async: false

  DeleteComment:
    description: "Remove comment (soft delete)"
    input:
      document_id: uuid
      comment_id: string
      delete_replies: boolean?
    output:
      success:
        deleted_count: integer
        affected_threads: array<uuid>
      errors:
        - code: COMMENT_NOT_FOUND
          message: "Comment does not exist"
        - code: HAS_REPLIES
          message: "Cannot delete comment with replies unless delete_replies=true"
    idempotent: true
    state_transition: "comment -> comment.deleted"
    async: false

  # Thread Operations
  GetThread:
    description: "Retrieve comment thread hierarchy"
    input:
      document_id: uuid
      thread_id: uuid?
      root_comment_id: string?
    output:
      success:
        thread_id: uuid
        comments: array<Comment>  # Hierarchical
        participants: array<string>
        created_at: timestamp
        updated_at: timestamp
        depth: integer
      errors:
        - code: THREAD_NOT_FOUND
          message: "No thread found"
    idempotent: true
    state_transition: "none"
    async: false

  # Position Tracking
  UpdatePositions:
    description: "Recalculate comment positions after edit"
    input:
      document_id: uuid
      edit_operation: EditOperation
    output:
      success:
        updated_comments: array<object>
          - comment_id: string
            old_position: Position
            new_position: Position
            status: enum[moved, unchanged, conflicted]
        conflicts: array<object>
          - comment_id: string
            reason: string
          resolution: enum[move, delete, split]
      errors:
        - code: INVALID_EDIT
          message: "Edit operation invalid"
    idempotent: false
    state_transition: "positions -> positions'"
    async: false

  # LLM Operations
  CreateLLMContext:
    description: "Build context for LLM request"
    input:
      document_id: uuid
      selection: Position?
      include_comments: boolean?
      context_lines: integer?
      user_query: string
    output:
      success:
        context_id: uuid
        context_size: integer  # tokens
        included_comments: integer
        preview: string
      errors:
        - code: DOCUMENT_NOT_FOUND
          message: "Document not loaded"
        - code: CONTEXT_TOO_LARGE
          message: "Context exceeds token limit"
    idempotent: true
    state_transition: "none -> context_prepared"
    async: false

  RequestLLMCompletion:
    description: "Send request to LLM provider"
    input:
      context_id: uuid
      provider: enum[claude, openai, local, custom]
      model: string
      temperature: float?
      max_tokens: integer?
      stream: boolean?
    output:
      success:
        response_id: uuid
        streaming: boolean
        estimated_time: integer  # milliseconds
      errors:
        - code: PROVIDER_ERROR
          message: "Provider unavailable or error"
        - code: RATE_LIMITED
          message: "API rate limit exceeded"
        - code: INVALID_CREDENTIALS
          message: "Authentication failed"
    idempotent: false
    state_transition: "context -> requesting"
    async: true

  StreamLLMResponse:
    description: "Receive streaming chunks from LLM"
    input:
      response_id: uuid
    output:
      success:
        chunk: string
        index: integer
        finished: boolean
        total_tokens: integer?
      errors:
        - code: STREAM_INTERRUPTED
          message: "Connection lost"
        - code: RESPONSE_NOT_FOUND
          message: "No active response"
    idempotent: true
    state_transition: "streaming -> streaming | complete"
    async: true
    streaming: true

  ApproveLLMResponse:
    description: "Accept and insert LLM response"
    input:
      response_id: uuid
      insert_as: enum[comment, text, suggestion]
      position: Position?
      author_override: string?
    output:
      success:
        inserted_id: string  # Comment ID or text position
        final_content: string
      errors:
        - code: RESPONSE_NOT_READY
          message: "Response still streaming"
        - code: RESPONSE_EXPIRED
          message: "Response no longer available"
    idempotent: false
    state_transition: "response -> inserted"
    async: false

  # UI Operations
  RenderView:
    description: "Generate terminal UI layout"
    input:
      document_id: uuid
      view_mode: enum[document, comments, split, llm_preview]
      viewport:
        width: integer
        height: integer
      scroll_offset: object
      filters: object?
    output:
      success:
        rendered_lines: array<string>
        cursor_position: Position
        status_line: string
        active_highlights: array<object>
          - type: enum[comment, selection, search]
            positions: array<Position>
            style: object
      errors:
        - code: VIEWPORT_TOO_SMALL
          message: "Terminal size insufficient"
    idempotent: true
    state_transition: "none"
    async: false

  HandleKeyEvent:
    description: "Process keyboard input"
    input:
      key: string  # Key code
      modifiers: array<enum[ctrl, alt, shift, meta]>
      current_state: UIState
    output:
      success:
        action: enum[none, navigate, edit, command, search]
        new_state: UIState
        side_effects: array<string>  # Commands to execute
      errors:
        - code: INVALID_KEY_BINDING
          message: "Key combination not recognized"
    idempotent: true
    state_transition: "ui_state -> ui_state'"
    async: false

  # Search Operations
  SearchComments:
    description: "Find comments matching criteria"
    input:
      document_id: uuid
      query: string?
      author: string?
      date_from: timestamp?
      date_to: timestamp?
      status: enum[all, active, resolved]?
      regex: boolean?
    output:
      success:
        results: array<Comment>
        total_count: integer
        grouped_by_thread: map<uuid, array<Comment>>
      errors:
        - code: INVALID_REGEX
          message: "Regex pattern invalid"
    idempotent: true
    state_transition: "none"
    async: false

  # Export/Import Operations
  ExportComments:
    description: "Export comments to different format"
    input:
      document_id: uuid
      format: enum[json, csv, markdown, html]
      include_resolved: boolean?
    output:
      success:
        content: string
        mime_type: string
        size: integer
      errors:
        - code: UNSUPPORTED_FORMAT
          message: "Export format not supported"
    idempotent: true
    state_transition: "none"
    async: false

  # Validation Contracts
  ValidateCriticMarkup:
    description: "Validate comment syntax"
    input:
      content: string
    output:
      success:
        valid: boolean
        warnings: array<string>
      errors:
        - code: MALFORMED_MARKUP
          message: "Invalid CriticMarkup syntax"
          details: array<object>
    idempotent: true
    state_transition: "none"
    async: false

# Event Contracts (for reactive flows)
events:
  DocumentChanged:
    payload:
      document_id: uuid
      change_type: enum[edit, comment_added, comment_removed]
      position: Position
      timestamp: timestamp
    subscribers:
      - position_tracker
      - ui_renderer
      - auto_save

  CommentAdded:
    payload:
      document_id: uuid
      comment_id: string
      thread_id: uuid?
      author: string
      position: Position
    subscribers:
      - thread_manager
      - notification_system
      - ui_updater

  LLMResponseReceived:
    payload:
      response_id: uuid
      chunk: string?
      complete: boolean
      error: string?
    subscribers:
      - stream_handler
      - ui_preview
      - metrics_collector

# Rate Limiting
rate_limits:
  llm_requests:
    per_minute: 10
    per_hour: 100
    burst: 5

  auto_save:
    min_interval: 30  # seconds
    debounce: 5       # seconds

  position_updates:
    batch_size: 100
    batch_window: 100  # milliseconds

# Error Recovery Strategies
error_recovery:
  network_errors:
    retry_count: 3
    backoff: exponential
    max_delay: 30000  # milliseconds

  parse_errors:
    strategy: best_effort
    fallback: raw_text_mode

  llm_errors:
    fallback_providers: [local, cached]
    timeout: 30000  # milliseconds

# Contract Versioning
versioning:
  current: "1.0.0"
  compatibility: "^1.0.0"
  deprecation_policy: "3_months_notice"